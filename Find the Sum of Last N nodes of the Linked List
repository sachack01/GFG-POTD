Date: 23/10/2024
Find the Sum of the Last N nodes of the Linked List

Difficulty: Easy

Problem:
Given a single linked list, calculate the sum of the last n nodes.

Note: It is guaranteed that n <= number of nodes.

Examples:

Input: Linked List: 5->9->6->3->4->10, n = 3

Output: 17
Explanation: The sum of the last three nodes in the linked list is 3 + 4 + 10 = 17.
Input: Linked List: 1->2, n = 2

Output: 3
Explanation: The sum of the last two nodes in the linked list is 2 + 1 = 3.
Constraints:
1 <= number of nodes, n <= 105
1 <= node->data <= 103

Code:

class Solution {
  public:
    /*Structure of the node of the linked list is as

    struct Node {
        int data;
        struct Node* next;

        Node(int x){
            data = x;
            next = NULL;
        }
    };
    */
    //Your task is to complete this function
    // function should return the sum of the last n nodes
    int sumOfLastN_Nodes(struct Node* head, int n) {
        // Code here
        
        // Most Common Method to solve this problem is by using
        // 1. Using Reverse Linked List
        // 2. Finding out the size of the linked list(while(current!=NULL) count++;) first, then subtract with 'n' to find the index from which we need to do the sum
        // 3. Using Fast and Slow Pointer(optimized Approach)
        
        //Base Case - if the head is Null OR 'n' is less than or equal to Zero
        if(!head || n<=0)   return 0;
        
        Node* fast = head;
        Node* slow = head;
        
        for(int i=0; i<n; i++)
        {
            fast = fast->next;
        }
        
        // while fast is null
        while(fast)
        {
            fast = fast->next;
            slow = slow->next;
        }
        
        int sum = 0;
        while(slow)
        {
            sum = sum + slow->data;
            slow = slow->next;
        }
        return sum;
    }
